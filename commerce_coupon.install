<?php

/**
 * Field setup
 */
function commerce_coupon_install_helper() {
  field_info_cache_clear();

  $fields = field_info_fields();
  $instances = field_info_instances();
  $field_types = field_info_field_types();
  
  /*
   * Discount coupon reference field
   */

  if (empty($fields['commerce_discount_reference']) && isset($field_types['entityreference'])) {
    // Create entity reference field.
    $field = array(
      'entity_types' => array('commerce_coupon'),
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'handler' => 'base',
        'target_type' => 'commerce_discount',
        'handler_setting' => array()
      ),
      'field_name' => 'commerce_discount_reference',
      'type' => 'entityreference',
      'locked' => TRUE,
    );
    field_create_field($field);
  }

  // Add discount reference to discount coupon
  if (empty($instances['commerce_coupon']['discount_coupon']['commerce_discount_reference'])) {
    $instance = array(
      'field_name' => 'commerce_discount_reference',
      'entity_type' => 'commerce_coupon',
      'bundle' => 'discount_coupon',
      'label' => t('Discount reference'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'entityreference_autocomplete',
        'module' => 'entityreference',
      ),
    );
    field_create_instance($instance);
  }

  /*
   * Order coupon reference field
   */

  if (empty($fields['commerce_coupons']) && isset($field_types['entityreference'])) {
    // Create entity reference field.
    $field = array(
      'entity_types' => array('commerce_order'),
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'handler' => 'base',
        'target_type' => 'commerce_coupon',
      ),
      'field_name' => 'commerce_coupons',
      'type' => 'entityreference',
      'locked' => TRUE,
    );
    field_create_field($field);
  }

  // Add coupons fields to orders.
  if (empty($instances['commerce_order']['commerce_order']['commerce_coupons'])) {
    $instance = array(
      'field_name' => 'commerce_coupons',
      'entity_type' => 'commerce_order',
      'bundle' => 'commerce_order',
      'label' => t('Coupons'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'entityreference_autocomplete',
        'module' => 'entityreference',
      ),
    );
    field_create_instance($instance);
  }
}

/*
 * Implements hook_install().
 */
function commerce_coupon_install() {
  // Install fields.
  commerce_coupon_install_helper();
}

/*
 * Implements hook_schema().
 */
function commerce_coupon_schema() {
  $schema['commerce_coupon'] = array(
    'description' => 'The base table for coupons.',
    'fields' => array(
      'coupon_id' => array(
        'description' => 'The primary identifier for the coupon.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'An identifier for the user who owns this coupon',
        'type' => 'int',      
        'not null' => TRUE,
        'default' => 0,          
      ),
      'type' => array(
        'description' => 'The type of this coupon.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'code' => array(
        'description' => 'The code of this coupon.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'bulk' => array(
        'description' => 'Whether or not this coupon code was generated in bulk.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the coupon was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the coupon was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),        
      'status' => array(
        'description' => 'Whether or not this coupon is enabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
        'description' => 'Everything else, serialized.',
      ),        
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'code' => array('code')
    ),
    'primary key' => array('coupon_id'),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'column' => array('uid' => 'uid')
      ),        
    ),
    'unique keys' => array(
      'code' => array('code')
    )
  );

  return $schema;
}

/**
 * Add "changed" and "data' fields and index on "code".
 */
function commerce_coupon_update_7001() {
  // Add "changed" field.
  if (!db_field_exists('commerce_coupon', 'changed')) {
    $field = array(
      'description' => 'The Unix timestamp when the coupon was most recently saved.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    );
    
    db_add_field('commerce_coupon', 'changed', $field);
  }
  // Add "data" field.
  if (!db_field_exists('commerce_coupon', 'data')) {
    $field = array(
      'type' => 'blob',
      'size' => 'big',
      'not null' => FALSE,
      'serialize' => TRUE,
      'description' => 'Everything else, serialized.',
    );
    
    db_add_field('commerce_coupon', 'data', $field);
  }  
  
  // Add index on code.
  db_add_index('commerce_coupon', 'code', array('code'));
}

/*
 * Implements hook_uninstall().
 */
function commerce_coupon_uninstall() {
  module_load_include('module', 'commerce');
  
  // Delete any field instance attached to a coupon type.  
  commerce_delete_instances('commerce_coupon');
  
  // Remove coupon reference field instance on order
  if ($instance = field_info_instance('commerce_order', 'commerce_coupons', 'commerce_order')) {
    commerce_delete_instance($instance);
  }
}


/**
 * Upgrade a Coupons 1.x site to 2.x. MAKE A BACKUP BEFORE DOING THIS.
 */
function commerce_coupon_update_7200(&$sandbox) {
  if (!isset($sandbox['did_schema_updates'])) {        
    $schema = drupal_get_schema_unprocessed('commerce_coupon', 'commerce_coupon');
    $fields = $schema['fields'];

    // Change "is active" field to "status".
    db_change_field('commerce_coupon', 'is_active', 'status', $fields['status']);

    // Add all the new columns
    db_add_field('commerce_coupon', 'bulk', $fields['bulk']);
    db_add_field('commerce_coupon', 'code', $fields['code']);
    db_add_field('commerce_coupon', 'uid', $fields['uid']);

    // Indexes
    db_add_index('commerce_coupon', 'code', array('code'));
    db_add_index('commerce_coupon', 'uid', array('uid'));
    
    // Disable coupons ui module
    module_disable(array('commerce_coupon_ui'));
    
    // Enable dependencies
    module_enable(array('commerce_discount', 'inline_conditions', 'commerce_coupon_usage'));
    
    // Trigger discount/coupon module field installation.
    drupal_flush_all_caches();
    $sandbox['did_schema_updates'] = TRUE;
  }
  
  $drush = function_exists('drush_print');
  
  // Update coupon entities
  _commerce_coupon_update_coupons_multipass(&$sandbox, $drush);
  
  // Update order entities
  _commerce_coupon_update_orders_multipass(&$sandbox, $drush);
  
  $sandbox['#finished'] = $sandbox['coupons']['#finished'] >= 1 && $sandbox['orders']['#finished'] >= 1;
  
  if ($sandbox['#finished'] == TRUE) {
    module_disable(array('commerce_coupon_pct', 'commerce_coupon_fixed_amount'));
  }
}

/**
 * Update four coupons at a time.
 * 
 * @param type $sandbox
 * @return type
 */
function _commerce_coupon_update_coupons_multipass(&$sandbox, $drush) {
  if (!isset($sandbox['coupons']['progress'])) {
    $sandbox['coupons']['progress'] = 0;
    $sandbox['coupons']['current_id'] = 0;
    $sandbox['coupons']['max'] = db_query('SELECT COUNT(DISTINCT coupon_id) FROM {commerce_coupon}')->fetchField();
  }
  
  // Get the next four coupon ids
  $coupon_ids = db_select('commerce_coupon', 'c')
     ->fields('c', array('coupon_id'))
     ->condition('coupon_id', $sandbox['coupons']['current_id'], '>')
     ->range(0, 1)
     ->orderBy('coupon_id', 'ASC')
     ->execute()
     ->fetchCol();
  
  // Update the coupons
  if ($coupon_ids) {
    $coupons = commerce_coupon_load_multiple($coupon_ids);

    foreach ($coupons as $coupon) {
      $original_coupon = clone $coupon;
      $coupon_wrapper = entity_metadata_wrapper('commerce_coupon', $coupon);
      
      // Update code column.
      if (empty($coupon->code)) {
        $code = $coupon_wrapper->commerce_coupon_code->value();
        $coupon->code = $code;
      }

      // Find update information about this coupon type.
      $parameters = module_invoke_all('commerce_coupon_legacy_mapping', $coupon);
      if (empty($parameters)) {
        return;
      }   

      // Determine if there is a suitable discount to use.
      $query = new EntityFieldQuery;
      $results = $query
        ->entityCondition('entity_type', 'commerce_discount')
        ->propertyCondition('type', 'order_discount')
        ->propertyCondition('name', $parameters['discount name'])
        ->execute();

      // Load matching discount.
      if (!empty($results['commerce_discount'])) {
        $discount_ids = array_keys($results['commerce_discount']);
        $discounts = entity_load('commerce_discount', $discount_ids);
        $discount = reset($discounts);
      }
      else {
        // Discount not found - create and save offer.
        $offer = entity_create('commerce_discount_offer', array(
          'type' => $parameters['offer type'],
        ));
        $offer_field = $parameters['offer field'];
        $offer_wrapper = entity_metadata_wrapper('commerce_discount_offer', $offer);
        $offer_wrapper->{$offer_field} = $parameters['offer value'];
        $offer_wrapper->save();

        // Create and save discount.
        $discount = entity_create('commerce_discount', array(
          'type' => 'order_discount',
          'name' => $parameters['discount name'],
          'label' => $parameters['label'],
          'component_title' => $parameters['label']
        ));

        $discount_wrapper = entity_metadata_wrapper('commerce_discount', $discount);
        // Set offer reference.
        $discount_wrapper->commerce_discount_offer = $offer;

        $discount_wrapper->save();
      }

      if ($discount) {
        $conditions = array();
        if (module_exists('commerce_coupon_usage') && !empty($coupon->commerce_coupon_number_of_uses)) {
          // Add an inline condition for number of uses. 
          $conditions[] = array(
            'condition_name' => 'commerce_coupon_usage_evaluate_usage',
            'condition_settings' => array(
              'max_usage' => $coupon_wrapper->commerce_coupon_number_of_uses->value()
            )
          );
        }

        // Set the bundle now.
        $coupon->type = 'discount_coupon';

        // Set inline conditions field. The wrapper just gets too confused here
        // b/c of the bundle change so we do not use it.
        if (!empty($conditions)) {          
          $lang = field_language('commerce_coupon', $coupon, 'commerce_coupon_conditions');          
          $coupon->commerce_coupon_conditions[$lang] = $conditions;
        }
        
        // Set discount reference and save.
        $lang = field_language('commerce_coupon', $coupon, 'commerce_discount_reference');
        $coupon->commerce_discount_reference[$lang][] = array('target_id' => $discount->discount_id);

        // Allow other modules to alter the coupon before it is saved.
        drupal_alter('commerce_coupon_update_pre_update', $original_coupon, $coupon, $discount);
        commerce_coupon_save($coupon);
      }
      
      $sandbox['coupons']['progress']++;
      $sandbox['coupons']['current_id'] = $coupon->coupon_id;
    }
    
    if ($drush) {
      drush_print(t('Processed @n coupons', array('@n' => count($coupon_ids))));
    }      
  }
  else {
    $sandbox['coupons']['#finished'] = 1;
  }
  
  $sandbox['coupons']['#finished'] = empty($sandbox['coupons']['max']) ? 1 : ($sandbox['coupons']['progress'] / $sandbox['coupons']['max']);
}

/**
 * Update four orders at a
 * 
 * @param type $sandbox
 */
function _commerce_coupon_update_orders_multipass(&$sandbox, $drush) {
  if (!isset($sandbox['orders']['progress'])) {
    $sandbox['orders']['progress'] = 0;
    $sandbox['orders']['current_id'] = 0;
    $sandbox['orders']['max'] = db_query('SELECT COUNT(DISTINCT order_id) FROM {commerce_order}')->fetchField();
  }
  
  // Get the next four order ids
  $order_ids = db_select('commerce_order', 'o')
     ->fields('o', array('order_id'))
     ->condition('order_id', $sandbox['orders']['current_id'], '>')
     ->range(0, 1)
     ->orderBy('order_id', 'ASC')
     ->execute()
     ->fetchCol();
  
  if ($order_ids) {
    $orders = commerce_order_load_multiple($order_ids);
    foreach ($orders as $order) {
      $original_order = clone $order;

      // Transfer coupon reference to the new field.
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      if ($order_wrapper->commerce_coupon_order_reference->value()) {
        $order_wrapper->commerce_coupons = $order_wrapper->commerce_coupon_order_reference->value();

        // Allow modules to alter the order before it is saved.
        drupal_alter('commerce_coupon_update_order_pre_update', $original_order, $order);
        $order_wrapper->save();
      }
      $sandbox['orders']['progress']++;
      $sandbox['orders']['current_id'] = $order->order_id;
    }
    
    if ($drush) {
      drush_print(t('Processed @n orders', array('@n' => count($order_ids))));
    }    
  }
  else {
    $sandbox['orders']['#finished'] = 1;
  }
  
  $sandbox['orders']['#finished'] = empty($sandbox['orders']['max']) ? 1 : ($sandbox['orders']['progress'] / $sandbox['orders']['max']);
}
