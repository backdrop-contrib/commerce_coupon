<?php

/**
 * @file
 * Installation hooks and procedures for Commerce Coupon.
 */

/**
 * Field setup.
 */
function commerce_coupon_install_helper() {
  field_info_cache_clear();

  $fields = field_info_fields();
  $instances = field_info_instances();
  $field_types = field_info_field_types();

  /*
   * Discount coupon reference field
   */

  if (empty($fields['commerce_discount_reference']) && isset($field_types['entityreference'])) {
    // Create entity reference field.
    $field = array(
      'entity_types' => array('commerce_coupon'),
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'handler' => 'base',
        'target_type' => 'commerce_discount',
        'handler_setting' => array(),
      ),
      'field_name' => 'commerce_discount_reference',
      'type' => 'entityreference',
      'locked' => TRUE,
    );
    field_create_field($field);
  }

  // Add discount reference to discount coupon.
  if (empty($instances['commerce_coupon']['discount_coupon']['commerce_discount_reference'])) {
    $instance = array(
      'field_name' => 'commerce_discount_reference',
      'entity_type' => 'commerce_coupon',
      'bundle' => 'discount_coupon',
      'label' => t('Discount reference'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'entityreference_autocomplete',
        'module' => 'entityreference',
      ),
    );
    field_create_instance($instance);
  }

  /*
   * Order coupon reference field
   */

  if (empty($fields['commerce_coupons']) && isset($field_types['entityreference'])) {
    // Create entity reference field.
    $field = array(
      'entity_types' => array('commerce_order'),
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'handler' => 'base',
        'target_type' => 'commerce_coupon',
      ),
      'field_name' => 'commerce_coupons',
      'type' => 'entityreference',
      'locked' => TRUE,
    );
    field_create_field($field);
  }

  // Add coupons fields to all order bundles.
  $order_entity_info = entity_get_info('commerce_order');
  foreach (array_keys($order_entity_info['bundles']) as $bundle) {
    if (empty($instances['commerce_order'][$bundle]['commerce_coupons'])) {
      $instance = array(
        'field_name' => 'commerce_coupons',
        'entity_type' => 'commerce_order',
        'bundle' => $bundle,
        'label' => t('Coupons'),
        'required' => FALSE,
        'widget' => array(
          'type' => 'entityreference_autocomplete',
          'module' => 'entityreference',
        ),
      );
      field_create_instance($instance);
    }
  }

  // Discount coupon handling strategy.
  if (empty($fields['commerce_coupon_strategy'])) {
    // Create coupon handling strategy field.
    $field = array(
      'type' => 'list_text',
      'field_name' => 'commerce_coupon_strategy',
      'locked' => TRUE,
      'settings' => array(
        'allowed_values' => array(),
        'allowed_values_function' => 'commerce_coupon_handling_strategies',
      ),
    );
    field_create_field($field);
  }

  foreach (commerce_discount_types() as $type => $value) {
    if (empty($instances['commerce_discount'][$type]['commerce_coupon_strategy'])) {
      $instance = array(
        'field_name' => 'commerce_coupon_strategy',
        'bundle' => $type,
        'entity_type' => 'commerce_discount',
        'label' => t('Coupon strategy'),
        'description' => t('Using "multi" strategy might cause problems with some offer types.'),
        'required' => TRUE,
        'widget' => array(
          'weight' => -10,
          'type' => 'options_buttons',
          'module' => 'options',
        ),
        'default_value' => array(
          0 => array('value' => 'once'),
        ),
      );
      field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_install().
 */
function commerce_coupon_install() {
  // Install fields.
  commerce_coupon_install_helper();
  // Dynamically generated variable data was detected on the following lines.
  // /commerce_coupon/commerce_coupon.module line 744
  // /commerce_coupon/includes/commerce_coupon.admin.inc line 16
}

/**
 * Implements hook_schema().
 */
function commerce_coupon_schema() {
  $schema['commerce_coupon'] = array(
    'description' => 'The base table for coupons.',
    'fields' => array(
      'coupon_id' => array(
        'description' => 'The primary identifier for the coupon.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'An identifier for the user who owns this coupon',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The type of this coupon.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'code' => array(
        'description' => 'The code of this coupon.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'bulk' => array(
        'description' => 'Whether or not this coupon code was generated in bulk.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the coupon was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the coupon was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Whether or not this coupon is enabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
        'description' => 'Everything else, serialized.',
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'primary key' => array('coupon_id'),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'unique keys' => array(
      'code' => array('code'),
    ),
  );

  return $schema;
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_coupon_update_7201() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function commerce_coupon_update_7202() { }

/**
 * Implements hook_uninstall().
 */
function commerce_coupon_uninstall() {
  module_load_include('module', 'commerce');

  // Delete any field instance attached to a coupon type.
  commerce_delete_instances('commerce_coupon');

  // Remove coupon reference field instance on order.
  if ($instance = field_info_instance('commerce_order', 'commerce_coupons', 'commerce_order')) {
    commerce_delete_instance($instance);
  }
}

/**
 * Implements hook_enable().
 */
function commerce_coupon_enable() {
  // Clear current entity property info cache.
  entity_property_info_cache_clear();
}

/**
 * Implements hook_update_last_removed().
 */
function commerce_coupon_update_last_removed() {
  return 7203;
}

/**
 * Migrate commerce_coupon variables to config.
 */
function commerce_coupon_update_1000() {
  $config = config('commerce_coupon.settings');
  // Currently there is only one type of coupon.
  $coupon_type = 'discount_coupon';
  $config->set('commerce_coupon_' . $coupon_type . '_default_code_size', update_variable_get('commerce_coupon_' . $coupon_type . '_default_code_size', 8));
  $config->set('commerce_coupon_checkout_pane_view', update_variable_get('commerce_coupon_checkout_pane_view', 'order_coupon_list|checkout'));
  $config->set('commerce_coupon_review_pane_view', update_variable_get('commerce_coupon_review_pane_view', 'order_coupon_list|checkout'));
  $config->save();

  update_variable_del('commerce_coupon_type_default_code_size');
  update_variable_del('commerce_coupon_name_default_code_size');
  update_variable_del('commerce_coupon_checkout_pane_view');
  update_variable_del('commerce_coupon_review_pane_view');
}
