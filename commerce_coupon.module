<?php

function commerce_coupon_entity_info() {
  $return = array();
  
  $return['commerce_coupon'] = array(
    'label' => t('Commerce Coupon'),
    'entity class' => 'CommerceCoupon',
    'controller class' => 'EntityAPIController',
    'base table' => 'commerce_coupon',
    'fieldable' => TRUE,

    'entity keys' => array(
      'id' => 'coupon_id',
      'bundle' => 'type',
      'label' => 'code',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'access callback' => 'commerce_coupon_access',
    'module' => 'commerce_coupon',
    'save callback' => 'commerce_coupon_save',
    
    'admin ui' => array(
      'path' => 'admin/commerce/coupons',
      'file' => 'commerce_coupon.admin.inc',
    ),
  );
  
  $return['commerce_coupon_log'] = array(
    'label' => t('Commerce Coupon Log'),
    'entity class' => 'CommerceCouponLog',
    'controller class' => 'EntityAPIController',
    'base table' => 'commerce_coupon_log',
    'fieldable' => FALSE,

    'entity keys' => array(
      'id' => 'log_id',
    ),
    'access callback' => 'commerce_coupon_access',
    'module' => 'commerce_coupon',
    'save callback' => 'commerce_coupon_log_save',
  );
  
  $return['commerce_coupon_type'] = array(
    'label' => t('Commerce Coupon Type'),
    'entity class' => 'CommerceCouponType',
    'controller class' => 'EntityAPIController',
    'base table' => 'commerce_coupon_type',
    'fieldable' => FALSE,
    'bundle of' => 'commerce_coupon',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'type',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'commerce_coupon_type_access',
    'module' => 'commerce_coupon',
    
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/commerce/coupons/types',
      'file' => 'commerce_coupon.admin.inc',
    ),
  );


  return $return;
}

function commerce_coupon_log_save(CommerceCouponLog $log) {
  $log->changed = time();
  return $log->save();
}


/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_coupon_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['commerce_coupon'] = array(
    'title' => t('Coupon'),
    'page' => 'checkout',
    'locked' => TRUE,
    'file' => 'includes/commerce_coupon.checkout_pane.inc',
    'base' => 'commerce_coupon_pane',
    'weight' => 9,
  );


  return $checkout_panes;
}

function commerce_coupon_menu() {
  $items = array();
  
  foreach (commerce_coupon_get_types() as $type => $info) {
    $entity = entity_create('commerce_coupon', array('type' => $type));
    $type_arg = strtr($type, '_', '-');
    $items['admin/commerce/coupons/add/'.$type_arg] = array(
      'title' => 'Create @name',
      'title arguments' => array('@name' => $info->label),
      'page callback' => 'entity_ui_get_form',
      'page arguments' => array('commerce_coupon', $entity, 'add'),
      'file' => 'commerce_coupon.admin.inc',
      'access callback' => 'commerce_coupon_access',
      'access arguments' => array('create', $type),
      'module' => 'commerce_coupon',
    );
  }
  
  return $items;
}

function commerce_coupon_menu_alter(&$items) {
  $items['admin/commerce/coupons/types']['type'] = MENU_LOCAL_TASK;
  
  $items['admin/commerce/coupons/list'] = array(
    'title' => 'Coupons',
    'description' => 'Manage the coupons.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ) + $items['admin/commerce/coupons'];
  
  $items['admin/commerce/coupons/add'] = array(
    'title' => 'Create Coupon',
    'page callback' => 'commerce_coupons_add_page',
    'access callback' => 'commerce_coupon_access',
    'access arguments' => array('create'),
    'module' => 'commerce_coupon',
  );
  
  $items['admin/commerce/coupons/create'] = array(
    'title' => 'Create Coupon',
    'page callback' => 'commerce_coupons_create_page',
    'access callback' => 'commerce_coupon_access',
    'access arguments' => array('create'),
    'module' => 'commerce_coupon',
    'type' => MENU_LOCAL_ACTION,
  );
}

function commerce_coupons_create_page() {
  drupal_goto('admin/commerce/coupons/add');
}

function commerce_coupons_add_page() {
  $item = menu_get_item();
  $content = system_admin_menu_block($item);
  
  // Bypass the admin/commerce/coupon/add listing if only one coupon type is
  // available.
  if (count($content) == 1) {
    $item = array_shift($content);
    drupal_goto($item['href']);
  }  
  return theme('commerce_coupon_add_list', array('content' => $content));
}


function commerce_coupon_theme() {
  return array(
    'commerce_coupon_add_list' => array(
      'variables' => array('content' => NULL),
    )
  );
}


function theme_commerce_coupon_add_list($variables) {
  $content = $variables['content'];
  $output = '';

  if ($content) {
    $output = '<dl class="commerce-coupon-type-list">';
    foreach ($content as $item) {
      $output .= '<dt>' . l($item['title'], $item['href'], $item['localized_options']) . '</dt>';
      $output .= '<dd>' . filter_xss_admin($item['description']) . '</dd>';
    }
    $output .= '</dl>';
  }
  else {
    if (user_access('administer coupon types')) {
      $output = '<p>' . t('You have not created any coupon types yet. Go to the <a href="@create-coupon-type">coupon type creation page</a> to add a new coupon type.', array('@create-coupon-type' => url('admin/commerce/coupons/types/add'))) . '</p>';
    }
    else {
      $output = '<p>' . t('No coupon type have been created yet for you to use.') . '</p>';
    }
  }

  return $output;
}


/**
 * Implements hook_entity_info_alter().
 *
 * Use this hook to specify commerce coupon bundles to avoid a recursion, as loading
 * the commerce coupon types needs the entity info too.
 */
function commerce_coupon_entity_info_alter(&$entity_info) {
  foreach (commerce_coupon_get_types() as $type => $info) {
    $entity_info['commerce_coupon']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/commerce/coupons/types/manage/%commerce_coupon_type',
        'real path' => 'admin/commerce/coupons/types/manage/' . $type,
        'bundle argument' => $type,
        'access arguments' => array('administer coupon types'),
      ),
    );
  }
}



function commerce_coupon_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer coupon types', $account);
}

function commerce_coupon_access($op, $type = NULL, $account = NULL) {
  return user_access('administer coupons', $account);
}


function commerce_coupon_permission() {
  $permissions = array(
    'administer coupon types' => array(
      'title' => t('Administer Coupon Types'),
      'description' => t('Allows users to manage coupon types.'),
    ),
    'administer coupons' => array(
      'title' => t('Administer Coupons'),
      'description' => t('Allows users to manage coupons.'),
    ),
  );
  return $permissions;
}



/**
 * Gets an array of all coupon types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return CouponType[]
 *   Depending whether $type isset, an array of coupon types or a single one.
 */
function commerce_coupon_get_types($type_name = NULL) {
  $types = entity_load('commerce_coupon_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}



/**
 * Menu argument loader; Load a coupon type by string.
 *
 * @param $type
 *   The machine-readable name of a coupon type to load.
 * @return
 *   A commerce coupon type array or FALSE if $type does not exist.
 */
function commerce_coupon_type_load($type) {
  return commerce_coupon_get_types($type);
}



/**
 * Fetch a coupon object.
 *
 * @param $coupon_id
 *   Integer specifying the coupon id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $coupon object or FALSE if it cannot be loaded.
 *
 * @see commerce_coupon_load_multiple()
 */
function commerce_coupon_load($coupon_id, $reset = FALSE) {
  $coupons = commerce_coupon_load_multiple(array($coupon_id), array(), $reset);
  return reset($coupons);
}

/**
 * Load multiple coupons based on certain conditions.
 *
 * @param $pids
 *   An array of coupon IDs.
 * @param $conditions
 *   An array of conditions to match against the {commerce_coupon} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of coupon objects, indexed by pid.
 *
 * @see entity_load()
 * @see commerce_coupon_load()
 */
function commerce_coupon_load_multiple($coupon_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_coupon', $coupon_ids, $conditions, $reset);
}


function commerce_coupon_log_load_multiple($log_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_coupon_log', $log_ids, $conditions, $reset);
}


function commerce_coupon_load_by_code($code) {
  $coupon = db_select('commerce_coupon')
    ->fields('commerce_coupon')
    ->condition('is_active', '1','=')
    ->condition('code', $code,'=')
    ->execute()
    ->fetchAssoc();
    
  if($coupon == NULL or !is_array($coupon)) {
    return NULL;
  }

  // TODO: Find a better way to load the entity
  return commerce_coupon_load($coupon['coupon_id']);
}


function commerce_coupon_get_coupons_by_order($order_id) {
  
  $coupon_raw = db_query('SELECT coupon_id, log_id FROM {commerce_coupon_log} WHERE order_id = :order_id', array(':order_id' => $order_id))->fetchAllAssoc('log_id', PDO::FETCH_ASSOC);
  
  
  
  if(!is_array($coupon_raw) or count($coupon_raw) <= 0) {
    return array();
  }
  
  $coupon_ids = array();
  
  foreach($coupon_raw as $coupon) {
    $coupon_ids[] = $coupon['coupon_id'];
  }
  
  return commerce_coupon_load_multiple($coupon_ids);  
}



/**
 * Deletes a coupon.
 */
function commerce_coupon_delete(Coupon $coupon) {
  $coupon->delete();
}

/**
 * Delete multiple coupons.
 *
 * @param $pids
 *   An array of coupon IDs.
 */
function commerce_coupon_delete_multiple(array $pids) {
  entity_get_controller('commerce_coupon')->delete($pids);
}

/**
 * Implements hook_user_cancel().
 */
function commerce_coupon_user_cancel($edit, $account, $method) {
  // Delete all coupons of the user in any case.
  foreach (commerce_coupon_load_by_user($account) as $coupon) {
    commerce_coupon_delete($coupon);
  }
}

/**
 * Create a new coupon object.
 */
function commerce_coupon_create(array $values) {
  return new CommerceCoupon($values);
}

/**
 * Create a new coupon object.
 */
function commerce_coupon_log_create(array $values) {
  return new CommerceCouponLog($values);
}

/**
 * Saves a coupon to the database.
 *
 * @param $coupon
 *   The coupon object.
 */
function commerce_coupon_save(CommerceCoupon $coupon) {
  
  // Generate a code if no is set:
  if(!isset($coupon->code) || empty($coupon->code)) {
    $coupon->code = commerce_coupon_generate_coupon_code();
  }
  return $coupon->save();
}

function commerce_coupon_generate_coupon_code($length = NULL) {
  
  // We define the possible characters. No 'l','1', 'i' to prevent
  // reconisation problems.
  $characters = array(
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M',
    'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n',
    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '2','3','4','5','6','7','8','9'
  );
  
  $numberOfCharacters = count($characters);
  
  $codeFound = false;
  
  if($length == NULL) {
    // TODO: Replace this hardcoded value with a setting
    $length = 8;
  }
  
  // We need to check if the produced coupon code is already in the 
  // database. We try this for 1000 iteration. If we then not found a
  // a code, we stop. There must be an error in this case.
  for($i = 0; $i < 1000 && $codeFound == false; $i++) {
    
    $code = '';
    
    // Create the code per character
    for($c = 0; $c < $length; $c++) {
      $randIndex = mt_rand(0, $numberOfCharacters);
      $code .= $characters[$randIndex];
    }
    
    // Check in the database if the generated code is already defined.
    if (commerce_coupon_code_exists($code) == false) {
      $codeFound = true;
    }
  }
  return $code;
}

function commerce_coupon_code_exists($code) {
  
  // TODO: Replace this query with drupal 7 api
  $rs = db_query('SELECT * FROM {commerce_coupon} WHERE code = :code', array(':code' => $code));
  $codeObject = $rs->fetchObject();
  
  if ($codeObject == null) {
    return false;
  }
  else {
    return true;
  }
}

function commerce_coupon_code_is_active($code) {

  // TODO: Replace this query with drupal 7 api
  $rs = db_query('SELECT * FROM {commerce_coupon} WHERE code = :code AND is_active = 1', array(':code' => $code));
  $codeObject = $rs->fetchObject();
  
  if ($codeObject == null) {
    return false;
  }
  else {
    return true;
  }

}

function commerce_coupon_code_is_valid($code, $order) {
  
  $coupon = commerce_coupon_load_by_code($code);
    
  // if no such coupon found, the $code is invalid
  if(!is_object($coupon)) {
    return false;
  }
  
  // We use the drupal_static function to generate a global variable.
  // We set per default the result to true. The rules can modify this values,
  // by invoking the valid or invalid action.
  $validation_results = &drupal_static('commerce_coupon_action_validation_results');
  $validation_results = true;
  
  // We invoke the rules. The defined action callback methods sets then the
  // validation result appropriate.
  rules_invoke_event('commerce_coupon_validate', $order, $coupon);
  
  // We get our global variable and return the result.  
  return drupal_static('commerce_coupon_action_validation_results');  
}


/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_coupon_commerce_price_component_type_info() {
  $components = array();

  // Add a price component type for each tax rate that specifies it.
  foreach (commerce_coupon_get_types() as $type => $coupon_type) {
    $components['commerce_coupon_' . $type] = array(
      'title' => $coupon_type->label,
      // TODO: Add addtional field to coupon type
      'display_title' => $coupon_type->label,
    );
  }

  return $components;
}


function commerce_coupon_redeem_coupon($coupon, $order) {
  global $user;
  
  if(!isset($order->order_id) or !isset($coupon->coupon_id) ) {
    drupal_set_message(t('Your coupon code cannot be redeem.'), 'error');
    return;
  }
  
  
  // Log the redemption
  $log = commerce_coupon_log_create(array(
    'uid' => $user,
    'order_id' => $order->order_id,
    'coupon_id' => $coupon->coupon_id,
    'is_accepted' => TRUE,
  ));
  $log->save();
  
  if(!($order instanceof EntityMetadataWrapper)) {
    $order = entity_metadata_wrapper('commerce_order', $order);
  }
  
  if (!$coupon->is_percentage) {
    $line_item = commerce_coupon_line_item_new($coupon, $order->order_id->value());
    commerce_line_item_save($line_item);
    $order->commerce_line_items[] = $line_item;
    $order->save();
  }
  
}


/**
 * Saves a coupon type to the db.
 */
function commerce_coupon_type_save(CommerceCouponType $type) {
  $type->save();
  
  // Ensure the creation of the rules (components)
  entity_defaults_rebuild();
  
  return $type;
}

/**
 * Deletes a coupon type from.
 */
function commerce_coupon_type_delete(CommerceCouponType $type) {
  $type->delete();
}


/**
 * Implements hook_commerce_coupon_type_delete()
 */
function commerce_coupon_commerce_coupon_type_delete($type) {
  // Delete all coupons of this type.
  if ($pids = array_keys(commerce_coupon_load_multiple(FALSE, array('type' => $type->type)))) {
    commerce_coupon_delete_multiple($pids);
  }
  // Rebuild the menu as any (user-category) menu items should be gone now.
  menu_rebuild();
}








/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_coupon_commerce_line_item_type_info() {
  return array(
    'coupon' => array(
      'type' => 'coupon',
      'name' => t('Coupon'),
      'description' => t('Coupon line item for fixed coupon amounts.'),
      'add_form_submit_value' => t('Add coupon'),
      'base' => 'commerce_coupon_line_item',
      'callbacks' => array(
        'configuration' => 'commerce_coupon_configure_line_item',
      ),
    ),
  );
}



/**
 * Returns an appropriate title for this line item.
 */
function commerce_coupon_line_item_title($line_item) {
  // TODO: Implement this method, get coupon code
  
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  
  
  
  return t('Coupon');
}


/**
 * Returns the elements necessary to add a product line item through a line item
 * manager widget.
 */
function commerce_coupon_line_item_add_form($form_state) {
  // TODO: Implement this method correct
  
  $order = $form_state['commerce_order'];
  $form = array();

  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => $default_amount,
    '#size' => 10,
  );

  // Build a currency options list from all enabled currencies.
  $options = array();
  foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
    $options[$currency_code] = check_plain($currency['code']);
  }

  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => $options,
    '#default_value' => commerce_default_currency(),
  );

  return $form;
}

/**
 * Adds the selected shippng information to a line item added via a line item
 *   manager widget.
 *
 * @param $line_item
 *   The newly created line item object.
 * @param $element
 *   The array representing the widget form element.
 * @param $form_state
 *   The present state of the form upon the latest submission.
 * @param $form
 *   The actual form array.
 *
 * @return
 *   NULL if all is well or an error message if something goes wrong.
 */
function commerce_coupon_line_item_add_form_submit(&$line_item, $element, &$form_state, $form) {
  // TODO: Implement this method correct
  
  $order = $form_state['commerce_order'];

  // Populate the line item with the product data.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  //$line_item_wrapper->shipping_method = $element['actions']['shipping_method']['#value'];
  $line_item_wrapper->commerce_unit_price->amount = $element['actions']['amount']['#value'];
  $line_item_wrapper->commerce_unit_price->currency_code = $element['actions']['currency_code']['#value'];
  $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
    $line_item_wrapper->commerce_unit_price->value(),
    'base_price',
    $line_item_wrapper->commerce_unit_price->value(),
    TRUE
  );
}


/**
 * Creates a new product line item populated with the proper product values.
 *
 * @param $coupon
 *   The fully loaded coupon to add.
 * @param $order_id
 *   Order to add this coupon.
 *
 * @return
 *   Line item object with default values.
 */
function commerce_coupon_line_item_new($coupon, $order_id) {
  // Create the new line item.
  $line_item = entity_create('commerce_line_item', array(
    'type' => 'coupon',
    'order_id' => $order_id,
    'quantity' => 1,
  ));
  // TODO: Implement this function

  $line_item->sku = $coupon->type . '_' . $coupon->coupon_id;
    
  // If it is a percentage coupon dont set any unit price
  if ($coupon->is_percentage) {
    return $line_item;
  }
  
  
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  // Set the unit price on the line item object.
  $line_item_wrapper->commerce_unit_price->amount = $coupon->amount * -1 * 100;
  
 // print_r($coupon->amount);

  // Add the base price to the components array.
  if (!commerce_price_component_load($line_item_wrapper->commerce_unit_price->value(), 'coupon')) {
    $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
      $line_item_wrapper->commerce_unit_price->value(),
      'commerce_coupon_' . $coupon->type,
      $line_item_wrapper->commerce_unit_price->value(),
      TRUE
    );
  }


  // Return the line item.
  return $line_item;
}


/**
 * Ensures the product line item type contains a product reference field.
 *
 * This function is called by the line item module when it is enabled or this
 * module is enabled. It invokes this function using the configuration_callback
 * as specified above.
 */
function commerce_coupon_configure_line_item() {
  
}






