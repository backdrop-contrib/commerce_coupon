<?php

/*
 * Implements hook_flush_caches().
 */
function commerce_coupon_flush_caches() {
  module_load_install('commerce_coupon');
  commerce_coupon_install_helper();
}

/*
 * Implements hook_entity_info().
 */
function commerce_coupon_entity_info() {
  $entity_info['commerce_coupon'] = array(
    'label' => t('Commerce Coupon'),
    'plural label' => t('Commerce Coupons'),
    'controller class' => 'CommerceCouponEntityController',
    'base table' => 'commerce_coupon',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'coupon_id',
      'label' => 'code',
      'bundle' => 'type'
    ),
    'module' => 'commerce_coupon',
    'permission labels' => array(
      'singular' => t('coupon'),
      'plural' => t('coupons'),
    ),
    'access callback' => 'commerce_entity_access',
    'access arguments' => array(
      'user key' => 'uid',
      'access tag' => 'commerce_coupon_access',
    ),
  );
  
  return $entity_info;
}

/*
 * Implements hook_entity_info_alter().
 */
function commerce_coupon_entity_info_alter(&$entity_info) {
  // Expose the admin UI for coupon fields.
  foreach (commerce_coupon_get_types() as $type => $info) {
    $entity_info['commerce_coupon']['bundles'][$type] = array(
      'admin' => array(
        'path' => 'admin/commerce/coupons/types/' . strtr($type, '_', '-'),
        'access arguments' => array('administer coupon types'),
      ),
      'label' => $info['label']
    );
  }
}

/*
 * Gets a list of all coupon types by invoking a hook.
 */
function commerce_coupon_get_types() {
  $cache = &drupal_static('commerce_coupon_type_info');
  
  if (!isset($cache)) {
    $cache = module_invoke_all('commerce_coupon_type_info');
  }
  
  return $cache;
}

/*
 * Implements hook_commerce_coupon_type_info().
 */
function commerce_coupon_commerce_coupon_type_info() {
  $types['discount_coupon'] = array(
    'label' => t('Discount coupon'),
  );
  
  return $types;
}

/*
 * Implements hook_menu().
 */
function commerce_coupon_menu() {
  // Remove coupon from order.
  $items['commerce/coupons/order/remove/%commerce_coupon/%commerce_order'] = array(
    'title' => 'Delete coupon from order',
    'page callback' => 'commerce_coupon_remove_coupon_from_order_callback',
    'page arguments' => array(4, 5),
    'access arguments' => array('access checkout'),
    'type' => MENU_CALLBACK,
  );
  
  // Edit & Delete coupon forms.
  $items['admin/commerce/coupons/%commerce_coupon'] = array(
    'title' => 'Edit',
    'page callback' => 'commerce_coupon_coupon_form_wrapper',
    'page arguments' => array(3, 'edit'),
    'access callback' => 'commerce_coupon_access',
    'access arguments' => array('update', 3),
    'weight' => 0,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/coupons/%commerce_coupon/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/coupons/%commerce_coupon/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'commerce_coupon_coupon_delete_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_coupon_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
  );
  
  // Coupon types.
  $items['admin/commerce/coupons/types'] = array(
    'title' => 'Coupon types',
    'description' => 'Manage coupon types for your store.',
    'file' => 'includes/commerce_coupon.admin.inc',      
    'page callback' => 'commerce_coupon_types_overview_page',
    'access arguments' => array('administer coupon types'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
    
  // Add coupon  
  $items['admin/commerce/coupons/add'] = array(
    'title' => 'Create Coupon',
    'description' => 'Create a new coupon',
    'page callback' => 'commerce_coupon_add_page',
    'page arguments' => array(commerce_coupon_create('discount_coupon')),
    'weight' => 10,
    'access callback' => 'commerce_coupon_access',
    'access arguments' => array('create', 'discount'),
    'file' => 'includes/commerce_coupon.admin.inc',
  );
  
  foreach (commerce_coupon_get_types() as $type => $coupon_type) {
    // Convert underscores to hyphens for the menu item argument.
    $type_arg = strtr($type, '_', '-');
    
    // Edit page    
    $items['admin/commerce/coupons/types/' . $type_arg] = array(
      'title' => $coupon_type['label'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_coupon_type_settings_form', $coupon_type),
      'access arguments' => array('administer coupon types'),
      'file' => 'includes/commerce_coupon.admin.inc',
    );
    
    $items['admin/commerce/coupons/types/' . $type_arg . '/edit'] = array(
      'title' => 'Edit',
      'access arguments' => array('administer coupon types'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );
    
    // Add pages
    $items['admin/commerce/coupons/add/' . $type_arg] = array(
      'title' => 'Create !label',
      'title arguments' => array('!label' => $coupon_type['label']),
      'description' => isset($coupon_type['description']) ? $coupon_type['description'] : '',
      'page callback' => 'commerce_coupon_coupon_form_wrapper',
      'page arguments' => array(commerce_coupon_create($type)),
      'access callback' => 'commerce_coupon_access',
      'access arguments' => array('create', commerce_coupon_create($type)),
      'file' => 'includes/commerce_coupon.admin.inc',
    );    
  }

  return $items;  
}

/*
 * Implements hook_theme().
 */
function commerce_coupon_theme() {
  return array(
    'commerce_coupon_type_admin_overview' => array(
      'variables' => array('coupon_type' => NULL),
    ),
  );
}

/*
 * Implements hook_menu_alter().
 */
function commerce_coupon_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
  foreach (commerce_coupon_get_types() as $type => $coupon_type) {
    // Convert underscores to hyphens for the menu item argument.
    $type_arg = strtr($type, '_', '-');
    $items['admin/commerce/coupons/types/' . $type_arg . '/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
    $items['admin/commerce/coupons/types/' . $type_arg . '/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  }
}

/*
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_coupon_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/products/add' on 'admin/commerce/products'.
  if ($root_path == 'admin/commerce/coupons') {
    $item = menu_get_item('admin/commerce/coupons/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/*
 * Implements hook_admin_menu_map().
 */
function commerce_coupon_admin_menu_map() {
  // Add awareness to the administration menu of the various product types so
  // they are included in the dropdown menu.
  $type_args = array();

  foreach (array_keys(commerce_coupon_get_types()) as $type) {
    $type_args[] = strtr($type, '_', '-');
  }

  $map['admin/commerce/coupons/types/%'] = array(
    'parent' => 'admin/commerce/coupons/types',
    'arguments' => array(
      array('%' => $type_args),
    ),
  );

  return $map;
}

/*
 * Implements hook_permission().
 *
 * Provides the basic access objects
 */
function commerce_coupon_permission() {
  $permissions = array(
    'administer coupon settings' => array(
      'title' => t('Administer Coupon Settings'),
      'description' => t('Allows users to manage coupon settings.'),
    ),
  );

  $permissions += commerce_entity_access_permissions('commerce_coupon');

  return $permissions;
}

/**
 * Checks coupon access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $coupon
 *   Optionally a coupon to check access for. If nothing is given access
 *   permissions for all coupons are returned.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function commerce_coupon_access($op, $coupon = NULL, $account = NULL) {
  return commerce_entity_access($op, $coupon, $account, 'commerce_coupon');
}

/*
 * Page wrapper: coupon add/edit form
 */
function commerce_coupon_coupon_form_wrapper($coupon) {
  module_load_include('inc', 'commerce_coupon', 'includes/commerce_coupon.admin');  
  
  return drupal_get_form('commerce_coupon_form', $coupon);
}

/*
 * Page wrapper: coupon delete confirmation form
 */
function commerce_coupon_coupon_delete_form_wrapper($coupon) {
  module_load_include('inc', 'commerce_coupon', 'includes/commerce_coupon.admin');
  
  return drupal_get_form('commerce_coupon_delete_form', $coupon);
}

/*
 * Page callback: remove a coupon from an order and redirect back to 
 * destination.
 */
function commerce_coupon_remove_coupon_from_order_callback($coupon, $order) {
  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], 'commerce_coupon_remove_checkout:' . $coupon->coupon_id . ':' . $order->order_id) || !commerce_checkout_access($order)) {
    return MENU_ACCESS_DENIED;
  }

  commerce_coupon_remove_coupon_from_order($order, $coupon);
  drupal_set_message(t('Coupon removed from order'));
  drupal_goto();
}

/*
 * Implements hook_commerce_discount_rule_build().
 */
function commerce_coupon_commerce_discount_rule_build($rule, $discount) {
  $discount_wrapper = entity_metadata_wrapper('commerce_discount', $discount);
  
  // Determine whether the discount has coupon references
  if ($discount_wrapper->coupons->value()) {
    // Product level discounts must pass the line item's order.
    $map = array(
      'order_discount' => 'commerce-order',
      'product_discount' => 'commerce-line-item:order'
    );
    
    if (isset($map[$discount->type])) {
      $rule->condition('commerce_coupon_order_has_discount_coupon_code', array(
        'order:select' => $map[$discount->type],
        'commerce_discount' => $discount->name)
      );
    }
  }
}

/*
 * Entity metadata getter: coupon properties on discounts
 */
function commerce_coupon_get_discount_properties($discount, $options, $name) {
  switch ($name) {
    case 'coupons':
      // Load coupons that reference this discount.
      $query = new EntityFieldQuery;
      $results = $query
        ->entityCondition('entity_type', 'commerce_coupon')
        ->fieldCondition('commerce_discount_reference', 'target_id', $discount->discount_id)
        ->execute();
      
      if (isset($results['commerce_coupon'])) {
        return array_keys($results['commerce_coupon']);
      }      
      return array();
      
      break;
  }
}

/*
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_coupon_commerce_checkout_pane_info() {
  $panes['commerce_coupon'] = array(
    'title' => t('Coupons'),
    'file' => 'includes/commerce_coupon.checkout_pane.inc',
    'base' => 'commerce_coupon_pane',
    'page' => 'checkout',
    'fieldset' => TRUE,
    'locked' => FALSE,
  );
          
  return $panes;
}

/**
 * Generates a new unique coupon code.
 *
 * @param $length
 *   Optional The length of the new code.
 * @return String
 *   The new coupon code.
 */
function commerce_coupon_generate_coupon_code($type, $length = NULL) {
  // We define the possible characters. No 'l','1', 'i' to prevent
  // reconisation problems.
  $characters = array(
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M',
    'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n',
    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '2', '3', '4', '5', '6', '7', '8', '9',
  );

  $numberOfCharacters = count($characters);
  $codeFound = FALSE;
  if ($length == NULL) {
    $length = variable_get('commerce_coupon_' . $type . '_default_code_size', 8);
  }

  // We need to check if the produced coupon code is already in the
  // database. We try this for 1000 iteration. If we then not found a
  // a code, we stop. There must be an error in this case.
  for ($i = 0; $i < 1000 && $codeFound == FALSE; $i++) {
    $code = '';

    // Create the code per character
    for ($c = 0; $c < $length; $c++) {
      $randIndex = mt_rand(0, $numberOfCharacters - 1);
      $code .= $characters[$randIndex];
    }

    // Check in the database if the generated code is already defined.
    if (commerce_coupon_code_exists($code) == FALSE) {
      $codeFound = TRUE;
    }
  }

  return $code;
}

/**
 * Determine whether a coupon may be applied to an order. This function will set
 * error messages if necessary.
 * 
 * @param type $coupon
 * @param type $order
 * @return boolean
 */
function commerce_coupon_may_redeem_coupon_code($code, $order) {
  // Trim trailing spaces
  $code = trim($code);
  $coupon = commerce_coupon_load_by_code($code);
  
  if (!$coupon || !$coupon->status) {
    drupal_set_message(t('Your coupon code is not valid.'), 'error');
    return FALSE;
  }
  
  $valid = TRUE;
  
  // The same coupon cannot be added twice.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wrapper->commerce_coupons as $order_coupon_wrapper) {
    if ($order_coupon_wrapper->coupon_id->value() == $coupon->coupon_id) {
      drupal_set_message(t('The coupon you have entered has already been applied to your order'), 'error');      
      $valid = FALSE;
    }
  }

  // Allow other modules to alter whether a coupon is acceptable to redeem for
  // this order.
  drupal_alter('commerce_coupon_coupon_may_redeem', $valid, $coupon, $order);
    
  return $valid;
}

/**
 * Apply a coupon to an order.
 *
 * @param $coupon
 *   The coupon to redeem.
 * @param $order
 *   The order on which the coupon should be redeemed.
 * @return void
 */
function commerce_coupon_redeem_coupon_code($code, $order) {
  $coupon = commerce_coupon_load_by_code($code);
  
  // Add the coupon to the order.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);  
  $order_wrapper->commerce_coupons[] = $coupon;

  // Invoke a rule event and save order.
  rules_invoke_event('commerce_coupon_redeem', $coupon, $order);
  commerce_order_save($order);
  return TRUE;
}

/**
 * Loads a coupon by its coupon code.
 *
 * @param $code
 *   A code of a coupon.
 * @return
 *   A coupon object corresponding to the coupon code.
 */
function commerce_coupon_load_by_code($code) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'commerce_coupon')
      ->propertyCondition('code', $code)
      ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT') // TODO is this still necessary?
      ->execute();

  if (empty($result)) {
    return;
  }

  $commerce_coupon = reset($result['commerce_coupon']);
  return commerce_coupon_load($commerce_coupon->coupon_id);
}

/**
 * Load multiple function (should be added to commerce discounts).
 * 
 * @param type $discount_ids
 * @param type $conditions
 * @param type $reset
 * @return type
 */
function commerce_coupon_discount_load_multiple($discount_ids, $conditions = array(), $reset = FALSE) {
  if (empty($discount_ids) && empty($conditions)) {
    return array();
  }  
  
  return entity_load('commerce_discount', $discount_ids, $conditions, $reset);
}

/*
 * Create a stub coupon
 */
function commerce_coupon_create($type) {
  return entity_get_controller('commerce_coupon')->create(array('type' => $type));
}

/**
 * Fetch a coupon entity.
 *
 * @param $commerce_coupon_id
 *   Integer specifying the coupon id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $commerce_coupon object or FALSE if it cannot be loaded.
 *
 * @see commerce_coupon_load_multiple()
 */
function commerce_coupon_load($commerce_coupon_id, $reset = FALSE) {
  $commerce_coupons = commerce_coupon_load_multiple(array($commerce_coupon_id), array(), $reset);
  return reset($commerce_coupons);
}

/**
 * 
 * @param type $coupon
 * @return type
 */
function commerce_coupon_save($coupon) {
  return entity_get_controller('commerce_coupon')->save($coupon);
}

/**
 * Deletes a coupon.
 *
 * @param $commerce_coupon_id
 *   Id of the coupon to delete.
 * @return void
 */
function commerce_coupon_delete($commerce_coupon_id) {
  return commerce_coupon_delete_multiple(array($commerce_coupon_id));
}

/**
 * Delete multiple coupons.
 *
 * @param $commerce_coupon_ids
 *   An array of coupon IDs.
 */
function commerce_coupon_delete_multiple(array $commerce_coupon_ids) {
  return entity_get_controller('commerce_coupon')->delete($commerce_coupon_ids);
}

/**
 * Load multiple coupons based on certain conditions.
 *
 * @param $commerce_coupon_ids
 *   An array of coupon IDs.
 * @param $conditions
 *   An array of conditions to match against the {commerce_coupon} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of coupon objects, indexed by coupon id.
 *
 * @see entity_load()
 * @see commerce_coupon_load()
 */
function commerce_coupon_load_multiple($commerce_coupon_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($commerce_coupon_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('commerce_coupon', $commerce_coupon_ids, $conditions, $reset);
}

/**
 * Checks if a given coupon code exists.
 *
 * @param $code
 *   Coupon code to check.
 *
 * @return boolean
 *   Returns TRUE if the coupon exists, otherwise return FALSE.
 */
function commerce_coupon_code_exists($code) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_coupon')
      ->propertyCondition('code', $code);

  $result = $query->execute();

  if (empty($result)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Returns the number of uses for this coupon.
 *
 * @param $coupon_id
 *   Coupon id to check.
 *
 * @return integer
 *   Returns number of uses of the coupon in all orders.
 */
function commerce_coupon_get_number_of_uses($coupon_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order')
      ->fieldCondition('commerce_coupons', 'target_id', $coupon_id, '=');
  return $query->count()->execute();
}

/**
 * Finds out if a given coupon code is present in an order.
 *
 * @param $code
 *   Coupon code to check.
 * @param $order
 *   Commerce order object.
 *
 * @return boolean
 *   Returns TRUE if the coupon is in the order, otherwise return FALSE.
 */
function commerce_coupon_code_is_in_order($code, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wrapper->commerce_coupon_order_reference as $coupon_wrapper) {
    if (strcasecmp($coupon_wrapper->code->value(), $code) == 0) {
      return TRUE;
    }
  }
  return FALSE;
}

/*
 * Implements hook_views_api().
 */
function commerce_coupon_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_coupon') . '/includes/views',
  );
}

/*
 * Implements hook_commerce_coupon_discount_savings_value_alter().
 */
function commerce_coupon_commerce_coupon_discount_savings_value_alter(&$text, $discount, $order) {
  // Common variables
  $discount_wrapper = entity_metadata_wrapper('commerce_discount', $discount);  
  $offer_wrapper = $discount_wrapper->commerce_discount_offer;
  $offer_type = $offer_wrapper->type->value();
  $offer = $offer_wrapper->value();
  $discount_type = $discount_wrapper->type->value();
  
  $price_display = array(
    'type' => 'commerce_price_formatted_amount',
    'label' => 'hidden'
  );
  
  // Savings value implementations on behalf of commerce discount.  
  switch ($discount_type) {
    case 'order_discount':
      switch ($offer_type) {
        case 'fixed_amount':
          $price = field_view_field('commerce_discount_offer', $offer, 'commerce_fixed_amount', $price_display);
          $text = drupal_render($price) . ' ' . t('from order');
                
          break;
        case 'percentage':          
          $pct_display = field_view_field('commerce_discount_offer', $offer, 'commerce_percentage', 'default');          
          $text = drupal_render($pct_display) . ' ' . t('from order');
          
          break;
        case 'free_shipping':
          $text = t('free shipping');
          
          break;
        case 'free_products':
          foreach ($offer_wrapper->commerce_free_products->value() as $product) {
            $product_names[] = check_plain($product->title);
          }
          if (isset($product_names)) {
            $product_text = implode(', ', $product_names);
          }
          
          $text = t('free product(s):') . ' ' . $product_text;
          break;
      }
      
      break;
    case 'product_discount':
      // By default, product discounts will show the value of the discount as 
      // well as what product it is for, as defined in its inline conditions.
      $product_text = t('all products');
      $conditions = $discount_wrapper->inline_conditions->value();

      foreach($conditions as $condition) {
        if ($condition['condition_name'] == 'commerce_product_contains_products') {
          foreach ($condition['condition_settings']['sku'] as $data) {
            $product = commerce_product_load($data['product_id']);
            if ($product) {
              $product_names[] = check_plain($product->title);
            }
          }
          
          if (isset($product_names)) {
            $product_text = implode(', ', $product_names);
          }
          break;
        }
      }
      
      switch ($offer_type) {
        case 'fixed_amount':
          $offer_text = field_view_field('commerce_discount_offer', $offer, 'commerce_fixed_amount', $price_display);
          
          break;
        case 'percentage':
          $offer_text = field_view_field('commerce_discount_offer', $offer, 'commerce_percentage', 'default');          
          
          break;
      }
      
      $text = drupal_render($offer_text) . ' ' . t('from') . ' ' . $product_text;
      
      break;
    default:
      // By default, just use the label.
      $text = check_plain($discount->label);
      
      break;
  }
}

/**
 * Load common discounts that are present in a coupon (by code) and an order.
 * 
 * @param type $code
 * @param type $order
 * @return type
 */
function commerce_coupon_order_coupon_code_discounts($code, $order) {
  $coupon = commerce_coupon_load_by_code($code);
  $coupon_wrapper = entity_metadata_wrapper('commerce_coupon', $coupon);
  
  if ($coupon_wrapper->commerce_discount_reference->value()) {
    
    // Line item level discounts are not stored on the order, so we have to dig
    // through the price components
    $order_discount_ids = commerce_coupon_order_discount_ids($order);
    $discount_ids = array_intersect($coupon_wrapper->commerce_discount_reference->raw(), $order_discount_ids);
    return commerce_coupon_discount_load_multiple($discount_ids);
  }
  
  return array();
}

/**
 * Determine whether an order has a particular discount.
 * 
 * @param type $order
 * @param type $discount
 * @return type
 */
function commerce_coupon_order_has_discount($order, $discount) {
  $order_discount_ids = commerce_coupon_order_discount_ids($order);
  
  return in_array($discount->discount_id, $order_discount_ids);
}


/**
 * Determine whether an order has a particular coupon code.
 * 
 * @param type $code
 * @param type $order
 * @return boolean
 */
function commerce_coupon_order_has_coupon_code($code, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  foreach ($order_wrapper->commerce_coupons as $delta => $coupon_wrapper) {
    if ($coupon_wrapper->code->value() == $code) {
      return TRUE;
    }
  }
}

/**
 * Load all discounts connected to an order, including line item level discounts
 * traced through line item unit price components.
 * 
 * @param type $order
 * @return array
 */
function commerce_coupon_order_discount_ids($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_discount_ids = array();
  
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    $data = $line_item_wrapper->commerce_unit_price->data->value();

    foreach ($data['components'] as $key => $component) {
      if ($component['name'] == 'discount' || !empty($component['price']['data']['discount_name'])) {          
        $order_discount_name = $component['price']['data']['discount_name'];
        $order_discount_wrapper = entity_metadata_wrapper('commerce_discount', $order_discount_name);
        // Make a list of discounts present via the order's line item price
        // components.
        $order_discount_ids[] = $order_discount_wrapper->discount_id->value();
      }
    }
  }  

  // Add the set of discounts directly referenced on the order.
  foreach ($order_wrapper->commerce_discounts->raw() as $discount_id) {
    $order_discount_ids[] = $discount_id;
  }

  $order_discount_ids = array_unique($order_discount_ids);  
  
  return $order_discount_ids;
}

/**
 * Load the discount associated with a coupon code.
 * 
 * @param type $coupon
 */
function commerce_coupon_load_coupon_code_discounts($code) {
  $discounts = array();
  $coupon = commerce_coupon_load_by_code($code);
  
  $query = new EntityFieldQuery;
  $results = $query
    ->entityCondition('entity_type', 'commerce_discount')
    ->fieldCondition('commerce_coupon_reference', 'target_id', $coupon->coupon_id)
    ->propertyCondition('enabled', 1)
    ->execute();
  
  if (!empty($results['commerce_discount'])) {
    $discounts = entity_load('commerce_discount', array_keys($results['commerce_discount']));
  }
  return $discounts;
}

/**
 * Removes a coupon from an order.
 *
 * @param $order
 *   Order object to affect in the coupon removal.
 * @param $coupon
 *   Coupon object to remove.
 */
function commerce_coupon_remove_coupon_from_order($order, $coupon, $save = TRUE) {
  $original_order = clone $order;
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Remove the coupons from the order relationship.
  foreach ($order_wrapper->commerce_coupons as $delta => $coupon_wrapper) {
    if ($coupon_wrapper->coupon_id->value() == $coupon->coupon_id) {
      $order_wrapper->commerce_coupons->offsetUnset($delta);
    }
  }
  if ($original_order <> $order && $save) {
    commerce_order_save($order);
  }
}

/*
 * Implements hook_module_implements_alter().
 */
function commerce_coupon_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'commerce_cart_order_refresh') {
    // Move our implementation to the end of the list.
    $group = $implementations['commerce_coupon'];
    unset($implementations['commerce_coupon']);
    $implementations['commerce_coupon'] = $group;
  }
}

/*
 * Implements hook_commerce_cart_order_refresh
 */
function commerce_coupon_commerce_cart_order_refresh($order_wrapper) {
  $save = FALSE;
  $order = $order_wrapper->value();
  
  foreach ($order_wrapper->commerce_coupons->value() as $coupon) {
    // Invalidate coupons that exist on the order without their discount present 
    // - meaning an inline condition on the discount was not satisfied.
    if (!commerce_coupon_order_coupon_code_discounts($coupon->code, $order)) {
      drupal_set_message(t('One or more conditions for coupon @code are currently not satisfied.', array('@code' => $coupon->code)), 'error');
      $valid = FALSE;
    }
    else {
      // Other modules may set validity.
      $valid = TRUE;
      drupal_alter('commerce_coupon_coupon_is_valid', $valid, $coupon, $order);
    }
    if (!$valid) {
      // Remove invalid coupons
      commerce_coupon_remove_coupon_from_order($order, $coupon, FALSE);
      $save = TRUE;
    }
  }
  
  if ($save) {
    commerce_order_save($order);
  }
}

/**
 * Get the argument order if present.
 * 
 * @param type $handler
 * @return type
 */
function _commerce_coupon_load_argument_order($handler) {
  // Determine if there is an order id argument. If multiple are present, use 
  // the first found.
  if (isset($handler->view->argument)) {
    foreach ($handler->view->argument as $alias => $argument) {
      if ($argument instanceof commerce_order_handler_argument_order_order_id) {
        $order_id = (int) $handler->view->argument[$alias]->value[0];
        $order = commerce_order_load($order_id);
      }
    }
  }

  return isset($order) ? $order : FALSE;
}